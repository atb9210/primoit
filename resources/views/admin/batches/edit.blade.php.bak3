<x-admin-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                {{ __('Edit Batch') }}: {{ $batch->name }}
            </h2>
            <div class="flex space-x-2">
                <a href="{{ route('admin.batches.index') }}" class="inline-flex items-center px-4 py-2 bg-gray-100 border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition ease-in-out duration-150">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    {{ __('Back to Batches') }}
                </a>
                <a href="{{ route('admin.batches.show', $batch) }}" class="inline-flex items-center px-4 py-2 bg-blue-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition ease-in-out duration-150">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    {{ __('View Batch') }}
                </a>
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-sm" role="alert">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-green-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm">{{ session('success') }}</p>
                        </div>
                    </div>
                </div>
            @endif

            @if (session('error'))
                <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-sm" role="alert">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm">{{ session('error') }}</p>
                        </div>
                    </div>
                </div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <form action="{{ route('admin.batches.update', $batch) }}" method="POST" enctype="multipart/form-data">
                        @csrf
                        @method('PUT')
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                            <!-- Basic Batch Information -->
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Batch Information</h3>
                                
                                <div class="mb-4">
                                    <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name *</label>
                                    <input type="text" name="name" id="name" value="{{ old('name', $batch->name) }}" required class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('name')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div class="mb-4">
                                    <label for="reference_code" class="block text-sm font-medium text-gray-700 mb-1">Reference Code</label>
                                    <input type="text" name="reference_code" id="reference_code" value="{{ old('reference_code', $batch->reference_code) }}" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('reference_code')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div class="mb-4">
                                    <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                    <textarea name="description" id="description" rows="4" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">{{ old('description', $batch->description) }}</textarea>
                                    @error('description')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                    <div>
                                        <label for="category_id" class="block text-sm font-medium text-gray-700 mb-1">Category *</label>
                                        <select name="category_id" id="category_id" required class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                            <option value="">Select a category</option>
                                            @foreach($categories as $category)
                                                <option value="{{ $category->id }}" {{ old('category_id', $batch->category_id) == $category->id ? 'selected' : '' }}>{{ $category->name }}</option>
                                            @endforeach
                                        </select>
                                        @error('category_id')
                                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                        @enderror
                                    </div>
                                    
                                    <div>
                                        <label for="unit_quantity" class="block text-sm font-medium text-gray-700 mb-1">Quantity *</label>
                                        <input type="number" name="unit_quantity" id="unit_quantity" value="{{ old('unit_quantity', $batch->unit_quantity) }}" min="1" required class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                        @error('unit_quantity')
                                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                        @enderror
                                    </div>
                                    
                                    <div>
                                        <label for="unit_price" class="block text-sm font-medium text-gray-700 mb-1">Unit Price (â‚¬) *</label>
                                        <input type="number" name="unit_price" id="unit_price" value="{{ old('unit_price', (float)$batch->unit_price) }}" min="0" step="0.01" required class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                        @error('unit_price')
                                            <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                        @enderror
                                    </div>
                                </div>
                                
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                    <div>
                                    <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status *</label>
                                    <select name="status" id="status" required class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                        <option value="draft" {{ old('status', $batch->status) == 'draft' ? 'selected' : '' }}>Draft</option>
                                        <option value="active" {{ old('status', $batch->status) == 'active' ? 'selected' : '' }}>Active</option>
                                        <option value="reserved" {{ old('status', $batch->status) == 'reserved' ? 'selected' : '' }}>Reserved</option>
                                        <option value="sold" {{ old('status', $batch->status) == 'sold' ? 'selected' : '' }}>Sold</option>
                                    </select>
                                    @error('status')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                    <div>
                                    <label for="available_from" class="block text-sm font-medium text-gray-700 mb-1">Available From</label>
                                    <input type="date" name="available_from" id="available_from" value="{{ old('available_from', $batch->available_from ? $batch->available_from->format('Y-m-d') : '') }}" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('available_from')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                    <div>
                                    <label for="available_until" class="block text-sm font-medium text-gray-700 mb-1">Available Until</label>
                                    <input type="date" name="available_until" id="available_until" value="{{ old('available_until', $batch->available_until ? $batch->available_until->format('Y-m-d') : '') }}" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('available_until')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Images Section -->
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800 mb-4">Images</h3>
                                
                                <div class="mb-4">
                                    <div class="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                                        <div class="space-y-1 text-center">
                                            <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                                                <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                            </svg>
                                            <div class="flex text-sm text-gray-600">
                                                <label for="images" class="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500">
                                                    <span>Upload files</span>
                                                    <input id="images" name="images[]" type="file" class="sr-only" multiple accept="image/*">
                                                </label>
                                                <p class="pl-1">or drag and drop</p>
                                            </div>
                                            <p class="text-xs text-gray-500">PNG, JPG, GIF up to 2MB</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div id="image-preview-container" class="mt-2 {{ count(is_array($batch->images) && !empty($batch->images) ? $batch->images : []) > 0 ? '' : 'hidden' }}">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Existing Images</label>
                                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-2" id="existing-images">
                                        @if(is_array($batch->images) && !empty($batch->images))
                                            @php
                                                $defaultImage = isset($batch->images['default']) ? $batch->images['default'] : null;
                                                $numericImages = array_filter($batch->images, function($key) {
                                                    return is_numeric($key);
                                                }, ARRAY_FILTER_USE_KEY);
                                            @endphp
                                            
                                            @foreach($numericImages as $index => $image)
                                                @if(is_string($image))
                                                <div class="relative group cursor-pointer border rounded-md overflow-hidden {{ $defaultImage && $defaultImage === $image ? 'ring-2 ring-indigo-500' : '' }}" data-index="{{ $index }}">
                                                    <img src="{{ asset('storage/' . $image) }}" alt="Batch Image" class="h-24 w-full object-cover">
                                                    <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                                                        <p class="text-white text-xs font-medium">Set as default</p>
                                                    </div>
                                                    @if($defaultImage && $defaultImage === $image)
                                                        <div class="absolute top-0 right-0 bg-indigo-500 text-white text-xs px-2 py-1">Default</div>
                                                    @endif
                                                    <div class="absolute bottom-0 left-0 right-0 bg-red-500 text-white text-xs text-center py-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                                        <label class="cursor-pointer">
                                                            <input type="checkbox" name="remove_images[]" value="{{ $index }}" class="hidden">
                                                            Remove
                                                        </label>
                                                    </div>
                                                </div>
                                                @endif
                                            @endforeach
                                        @endif
                                    </div>
                                    <input type="hidden" name="default_image_index" id="default_image_index" value="{{ isset($batch->images['default']) && is_string($batch->images['default']) ? array_search($batch->images['default'], is_array($batch->images) ? $batch->images : []) : 0 }}">
                                    <p class="text-xs text-gray-500 mt-1">Click on an image to set it as default. Hover and click 'Remove' to mark for deletion.</p>
                                </div>
                                
                                <div id="new-image-preview-container" class="mt-2 hidden">
                                    <label class="block text-sm font-medium text-gray-700 mb-1">New Image Uploads</label>
                                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-2" id="new-image-preview">
                                        <!-- New image previews will be inserted here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Batch Source -->
                        <div class="mt-6 bg-white p-4 rounded-lg border border-gray-200">
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Batch Source</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label for="source_type" class="block text-sm font-medium text-gray-700 mb-1">Source Type</label>
                                    <select name="source_type" id="source_type" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" onchange="toggleSupplierField()">
                                        <option value="internal" {{ old('source_type', $batch->source_type) == 'internal' ? 'selected' : '' }}>Internal (Our Stock)</option>
                                        <option value="external" {{ old('source_type', $batch->source_type) == 'external' ? 'selected' : '' }}>External (3rd Party Supplier)</option>
                                    </select>
                                    @error('source_type')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div id="supplier_container">
                                    <label for="supplier" class="block text-sm font-medium text-gray-700 mb-1">Supplier</label>
                                    <select name="supplier" id="supplier" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                        <option value="">Select a supplier</option>
                                        <option value="ITSale" {{ old('supplier', $batch->supplier) == 'ITSale' ? 'selected' : '' }}>ITSale</option>
                                        <option value="Foxway" {{ old('supplier', $batch->supplier) == 'Foxway' ? 'selected' : '' }}>Foxway</option>
                                        <option value="Ecorefurb" {{ old('supplier', $batch->supplier) == 'Ecorefurb' ? 'selected' : '' }}>Ecorefurb</option>
                                        <option value="Other" {{ old('supplier', $batch->supplier) == 'Other' ? 'selected' : '' }}>Other</option>
                                        @if($batch->supplier && !in_array($batch->supplier, ['ITSale', 'Foxway', 'Ecorefurb', 'Other']))
                                            <option value="{{ $batch->supplier }}" selected>{{ $batch->supplier }}</option>
                                        @endif
                                    </select>
                                    @error('supplier')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div class="col-span-1 md:col-span-2">
                                    <label for="source_reference" class="block text-sm font-medium text-gray-700 mb-1">Source Reference</label>
                                    <input type="text" name="source_reference" id="source_reference" value="{{ old('source_reference', $batch->source_reference) }}" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" placeholder="Supplier reference number, invoice, or link">
                                    @error('source_reference')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div>
                                    <label for="batch_cost" class="block text-sm font-medium text-gray-700 mb-1">Batch Cost (â‚¬)</label>
                                    <input type="number" name="batch_cost" id="batch_cost" value="{{ old('batch_cost', $batch->batch_cost ?? 0) }}" step="0.01" min="0" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('batch_cost')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div>
                                    <label for="shipping_cost" class="block text-sm font-medium text-gray-700 mb-1">Shipping Cost (â‚¬)</label>
                                    <input type="number" name="shipping_cost" id="shipping_cost" value="{{ old('shipping_cost', $batch->shipping_cost ?? 0) }}" step="0.01" min="0" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('shipping_cost')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div>
                                    <label for="tax_amount" class="block text-sm font-medium text-gray-700 mb-1">Tax Amount (â‚¬)</label>
                                    <input type="number" name="tax_amount" id="tax_amount" value="{{ old('tax_amount', $batch->tax_amount ?? 0) }}" step="0.01" min="0" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('tax_amount')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div>
                                    <label for="total_cost" class="block text-sm font-medium text-gray-700 mb-1">Total Cost (â‚¬)</label>
                                    <input type="number" name="total_cost" id="total_cost" value="{{ old('total_cost', $batch->total_cost ?? 0) }}" step="0.01" min="0" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-gray-100" readonly>
                                    <p class="text-xs text-gray-500 mt-1">This value is calculated automatically.</p>
                                </div>
                                
                                
                                <div>
                                    <label for="profit_margin" class="block text-sm font-medium text-gray-700 mb-1">Profit Margin (%)</label>
                                    <input type="number" name="profit_margin" id="profit_margin" value="{{ old('profit_margin', $batch->profit_margin ?? 16) }}" min="0" step="1" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                    @error('profit_margin')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>
                                
                                <div>
                                    <label for="sale_price" class="block text-sm font-medium text-gray-700 mb-1">Sale Price (â‚¬)</label>
                                    <input type="number" name="sale_price" id="sale_price" value="{{ old('sale_price', $batch->sale_price ?? 0) }}" min="0" step="0.01" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 bg-gray-100" readonly>
                                    <!-- Backup hidden field with the correct value -->
                                    <input type="hidden" name="sale_price_backup" value="{{ old('sale_price', $batch->sale_price ?? 0) }}">
                                    @error('sale_price')
                                        <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                                    @enderror
                                </div>

                                <!-- Debug info - Remove in production -->
                                <div class="col-span-2 text-xs text-gray-500 mt-1">
                                    DB Sale Price: {{ $batch->sale_price ?? 'null' }}
                                </div>
                            </div>
                        </div>
                        
                        <!-- Notes -->
                        <div class="mt-6">
                            <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                            <textarea name="notes" id="notes" rows="3" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">{{ old('notes', $batch->notes) }}</textarea>
                            @error('notes')
                                <p class="mt-1 text-sm text-red-600">{{ $message }}</p>
                            @enderror
                        </div>
                        
                        <!-- Product Batch Parameters -->
                        <div class="mt-8 border-t pt-6">
                            <div class="flex justify-between items-center mb-4">
                                <h3 class="text-lg font-semibold text-gray-800">Product Batch Parameters</h3>
                                <button type="button" id="add-parameter" class="inline-flex items-center px-3 py-1.5 bg-green-600 border border-transparent rounded-md font-medium text-xs text-white hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add Parameter
                                </button>
                            </div>
                            
                            <!-- Fixed Parameters Input (Hidden) -->
                            <div class="hidden">
                                <input type="text" name="product_manufacturer" id="product_manufacturer" value="{{ old('product_manufacturer', $batch->product_manufacturer) }}" required>
                                <input type="text" name="product_model" id="product_model" value="{{ old('product_model', $batch->product_model) }}" required>
                                <select name="condition_grade" id="condition_grade">
                                    <option value="">None</option>
                                    <option value="A" {{ old('condition_grade', $batch->condition_grade) == 'A' ? 'selected' : '' }}>A</option>
                                    <option value="B" {{ old('condition_grade', $batch->condition_grade) == 'B' ? 'selected' : '' }}>B</option>
                                    <option value="C" {{ old('condition_grade', $batch->condition_grade) == 'C' ? 'selected' : '' }}>C</option>
                                    <option value="D" {{ old('condition_grade', $batch->condition_grade) == 'D' ? 'selected' : '' }}>D</option>
                                </select>
                                <input type="number" name="price" id="price" value="{{ old('price', $batch->unit_price) }}" step="0.01" min="0">
                                <input type="number" name="quantity" id="quantity" value="{{ old('quantity', $batch->unit_quantity) }}" min="1">
                                <select name="tech_grade" id="tech_grade">
                                    <option value="Working" {{ old('tech_grade', $batch->visual_grade) == 'Working' ? 'selected' : '' }}>Working</option>
                                    <option value="Working*" {{ old('tech_grade', $batch->visual_grade) == 'Working*' ? 'selected' : '' }}>Working*</option>
                                    <option value="Not Working" {{ old('tech_grade', $batch->visual_grade) == 'Not Working' ? 'selected' : '' }}>Not Working</option>
                                </select>
                            </div>
                            
                            <!-- Required Parameters as Tags -->
                            <div class="bg-gray-50 p-4 rounded-lg mb-6">
                                <h4 class="text-sm font-medium text-gray-700 mb-3">Required Parameters</h4>
                                
                                <div class="flex flex-wrap items-center gap-3">
                                    <div class="bg-indigo-100 text-indigo-800 px-3 py-1.5 rounded-full flex items-center">
                                        <span class="text-sm">Manufacturer: {{ $batch->product_manufacturer }}</span>
                                    </div>
                                    
                                    <div class="bg-indigo-100 text-indigo-800 px-3 py-1.5 rounded-full flex items-center">
                                        <span class="text-sm">Model: {{ $batch->product_model }}</span>
                                    </div>
                                    
                                    <div class="bg-indigo-100 text-indigo-800 px-3 py-1.5 rounded-full flex items-center">
                                        <span class="text-sm">Grade: {{ $batch->condition_grade }}</span>
                                    </div>
                                    
                                    <div class="bg-indigo-100 text-indigo-800 px-3 py-1.5 rounded-full flex items-center">
                                        <span class="text-sm">Price: @formatPrice($batch->unit_price)</span>
                                    </div>
                                    
                                    <div class="bg-indigo-100 text-indigo-800 px-3 py-1.5 rounded-full flex items-center">
                                        <span class="text-sm">Quantity: {{ $batch->unit_quantity }}</span>
                                    </div>
                                    
                                    <div class="bg-indigo-100 text-indigo-800 px-3 py-1.5 rounded-full flex items-center">
                                        <span class="text-sm">Tech Grade: {{ $batch->visual_grade }}</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Dynamic Parameters Section (Additional) -->
                            <div class="mb-6">
                                <h4 class="text-sm font-medium text-gray-700 mb-3">Additional Parameters</h4>
                                <p class="text-xs text-gray-500 mb-4">Add parameters as simple tags. Each parameter will be stored as a key in JSON data.</p>
                                
                                <div id="dynamic-parameters" class="flex flex-wrap gap-2 mb-4">
                                    <!-- Existing parameters will be displayed here -->
                                    @if(is_array($batch->specifications) && !empty($batch->specifications))
                                        @foreach($batch->specifications as $key => $value)
                                            @if(is_string($key) && is_string($value))
                                            <div class="dynamic-param-tag bg-blue-100 text-blue-800 px-3 py-1.5 rounded-full flex items-center">
                                                <span class="text-sm mr-2">{{ $key }}</span>
                                                <input type="hidden" name="param_keys[]" value="{{ $key }}">
                                                <input type="hidden" name="param_values[]" value="{{ $value }}">
                                                <button type="button" class="remove-param text-blue-600 hover:text-blue-900">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                            @endif
                                        @endforeach
                                    @endif
                                </div>
                                
                                <div class="flex items-center">
                                    <input type="text" id="new-param-input" placeholder="Type a parameter name and press Enter" class="flex-grow rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 text-sm">
                                </div>
                            </div>
                        </div>
                        
                        <!-- Parameter Suggestions Based on Category -->
                        <div class="mt-4 mb-6">
                            <div class="bg-blue-50 p-4 rounded-lg">
                                <h4 class="text-sm font-semibold text-blue-700 mb-2">Suggested Parameters</h4>
                                <div id="suggested-params" class="text-sm text-blue-600">
                                    <p>Select a category to see suggested parameters.</p>
                                </div>
                                <div class="mt-2">
                                    <button type="button" id="add-suggested-params" class="text-xs text-blue-700 font-medium hover:text-blue-900 hidden">
                                        <span class="underline">Add all suggested parameters</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Products Section -->
                        <div class="mt-8">
                            <h3 class="text-lg font-semibold text-gray-800 mb-4">Products in this Batch</h3>
                            
                            <div class="mb-4 flex justify-between items-center">
                                <div class="text-sm text-gray-500">
                                    Current total: <span class="font-medium">@formatPrice($batch->total_price)</span> / 
                                    <span class="font-medium">{{ $batch->total_quantity }}</span> units
                                </div>
                                <button type="button" id="add-product-row" class="inline-flex items-center px-3 py-2 bg-green-600 border border-transparent rounded-md font-medium text-xs text-white hover:bg-green-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                    </svg>
                                    Add Product
                                </button>
                            </div>
                            
                            <div class="overflow-x-auto">
                                <table class="min-w-full divide-y divide-gray-200" id="products-table">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Unit Price</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200" id="product-rows">
                                        @if(is_array($batch->products) && !empty($batch->products))
                                            @foreach($batch->products as $index => $product)
                                            @if(is_array($product) && isset($product['manufacturer']) && isset($product['model']) && isset($product['quantity']) && isset($product['price']))
                                            <tr class="product-row">
                                                <td class="px-4 py-3 text-sm font-medium text-gray-900">
                                                    {{ $product['id'] ?? ($batch->reference_code . '-' . ($index + 1)) }}
                                                    <input type="hidden" name="product_ids[]" value="{{ $product['id'] ?? ($batch->reference_code . '-' . ($index + 1)) }}">
                                                </td>
                                                <td class="px-4 py-3">
                                                        <div class="text-sm text-gray-900">
                                                            {{ $product['manufacturer'] }} {{ $product['model'] }}
                                                        </div>
                                                </td>
                                                <td class="px-4 py-3">
                                                        <input type="number" name="quantities[]" value="{{ $product['quantity'] }}" min="1" class="quantity-input w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                                                </td>
                                                <td class="px-4 py-3">
                                                        <input type="number" name="unit_prices[]" value="{{ (float)$product['price'] }}" min="0" step="0.01" class="price-input w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                                                </td>
                                                <td class="px-4 py-3">
                                                    <div class="product-total text-sm font-medium text-gray-900">
                                                        @formatPrice($product['price'] * $product['quantity'])
                                                    </div>
                                                </td>
                                                <td class="px-4 py-3">
                                                    <button type="button" class="remove-product-row text-red-600 hover:text-red-900 font-medium">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                        </svg>
                                                    </button>
                                                </td>
                                            </tr>
                                            @endif
                                        @endforeach
                                        @endif
                                    </tbody>
                                </table>
                            </div>
                            
                            <div class="mt-6 flex justify-between items-center">
                                <div>
                                    <p class="text-sm text-gray-500">Total batch value: <span id="batch-total" class="font-medium text-gray-900"></span></p>
                                    <p class="text-sm text-gray-500">Total units: <span id="batch-quantity" class="font-medium text-gray-900"></span></p>
                                </div>
                                <div class="flex space-x-2">
                                    <!-- Direct submit button as fallback -->
                                    <button type="submit" class="inline-flex items-center px-4 py-2 bg-gray-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 transition ease-in-out duration-150">
                                        Save Directly
                                    </button>
                                    
                                    <!-- JavaScript-enhanced button -->
                                    <button type="button" id="save-batch-btn" class="inline-flex items-center px-4 py-2 bg-indigo-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition ease-in-out duration-150">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                        </svg>
                                        Save Batch
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Images -->
    <div class="mt-8 border-t pt-6 hidden">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Images</h3>
        
        <div class="mb-6">
            <label for="images-hidden" class="block text-sm font-medium text-gray-700 mb-1">Upload Images</label>
            <input type="file" name="images-hidden[]" id="images-hidden" multiple accept="image/*" class="w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
            <p class="mt-1 text-sm text-gray-500">You can upload multiple images. Maximum size: 2MB per image.</p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Cache elements
            const productRows = document.getElementById('product-rows');
            const addProductButton = document.getElementById('add-product-row');
            const batchTotalElement = document.getElementById('batch-total');
            const batchQuantityElement = document.getElementById('batch-quantity');
            
            // Batch Source fields
            const sourceTypeSelect = document.getElementById('source_type');
            const supplierContainer = document.getElementById('supplier_container');
            const batchCostInput = document.getElementById('batch_cost');
            const shippingCostInput = document.getElementById('shipping_cost');
            const taxAmountInput = document.getElementById('tax_amount');
            const totalCostInput = document.getElementById('total_cost');
            
            // Toggle supplier field based on source type
            function toggleSupplierField() {
                if (sourceTypeSelect.value === 'internal') {
                    supplierContainer.classList.add('hidden');
                } else {
                    supplierContainer.classList.remove('hidden');
                }
            }
            
            // Calculate total cost
            function calculateTotalCost() {
                const batchCost = parseFloat(batchCostInput.value) || 0;
                const shippingCost = parseFloat(shippingCostInput.value) || 0;
                const taxAmount = parseFloat(taxAmountInput.value) || 0;
                
                const total = batchCost + shippingCost + taxAmount;
                totalCostInput.value = total.toFixed(2);
            }
            
            // Add event listeners for cost calculations
            if (batchCostInput) {
                batchCostInput.addEventListener('input', calculateTotalCost);
            }
            
            if (shippingCostInput) {
                shippingCostInput.addEventListener('input', calculateTotalCost);
            }
            
            if (taxAmountInput) {
                taxAmountInput.addEventListener('input', calculateTotalCost);
            }
            
            // Initialize supplier field visibility
            toggleSupplierField();
            
            // Initialize total cost calculation
            calculateTotalCost();
            
            // Add event listener for source type changes
            if (sourceTypeSelect) {
                sourceTypeSelect.addEventListener('change', toggleSupplierField);
            }
            
            // Function to update row total
            function updateRowTotal(row) {
                const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
                const price = parseFloat(row.querySelector('.price-input').value) || 0;
                const total = quantity * price;
                row.querySelector('.row-total').textContent = 'â‚¬' + total.toFixed(2);
            }
            
            // Function to update batch totals
            function updateBatchTotals() {
                let totalPrice = 0;
                let totalQuantity = 0;
                
                document.querySelectorAll('.product-row').forEach(row => {
                    const quantity = parseFloat(row.querySelector('.quantity-input').value) || 0;
                    const price = parseFloat(row.querySelector('.price-input').value) || 0;
                    
                    totalPrice += quantity * price;
                    totalQuantity += quantity;
                });
                
                batchTotalElement.textContent = 'â‚¬' + totalPrice.toFixed(2);
                batchQuantityElement.textContent = totalQuantity;
            }
            
            // Funzione per aggiungere una nuova riga di prodotto
            document.getElementById('add-product-row').addEventListener('click', function() {
                const tableBody = document.getElementById('product-rows');
                const productCount = tableBody.querySelectorAll('.product-row').length;
                
                const newRow = document.createElement('tr');
                newRow.className = 'product-row';
                
                // Ottieni il reference code
                const refCode = "{{ $batch->reference_code }}";
                
                // Genera un ID univoco per il nuovo prodotto
                const newProductId = refCode + '-' + (productCount + 1);
                
                newRow.innerHTML = `
                    <td class="px-4 py-3 text-sm font-medium text-gray-900">
                        ${newProductId}
                        <input type="hidden" name="product_ids[]" value="${newProductId}">
                    </td>
                        <td class="px-4 py-3">
                            <div class="flex space-x-2">
                            <input type="text" name="manufacturers[]" placeholder="Manufacturer" class="w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                            <input type="text" name="models[]" placeholder="Model" class="w-1/2 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                            </div>
                        </td>
                        <td class="px-4 py-3">
                            <input type="number" name="quantities[]" value="1" min="1" class="quantity-input w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                        </td>
                        <td class="px-4 py-3">
                            <input type="number" name="unit_prices[]" value="0.00" min="0" step="0.01" class="price-input w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" required>
                        </td>
                        <td class="px-4 py-3">
                        <div class="product-total text-sm font-medium text-gray-900">â‚¬0.00</div>
                        </td>
                        <td class="px-4 py-3">
                        <button type="button" class="remove-product-row text-red-600 hover:text-red-900 font-medium">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </td>
                `;
                
                tableBody.appendChild(newRow);
                
                // Aggiungi listener per gli eventi di calcolo
                addEventListenersToRow(newRow);
                
                // Ricalcola i totali
                calculateTotals();
            });

            // Image preview functionality
            const imageInput = document.getElementById('images');
            const newImagePreviewContainer = document.getElementById('new-image-preview-container');
            const newImagePreview = document.getElementById('new-image-preview');
            const defaultImageIndex = document.getElementById('default_image_index');
            
            // Existing images functionality
            const existingImagesContainer = document.getElementById('existing-images');
            
            if (existingImagesContainer) {
                const existingImages = existingImagesContainer.querySelectorAll('.relative.group');
                
                existingImages.forEach(imgDiv => {
                    imgDiv.addEventListener('click', function(e) {
                        // Don't trigger if clicked on the remove checkbox
                        if (e.target.closest('label')) return;
                        
                        // Remove highlight from all existing images
                        existingImages.forEach(el => {
                            el.classList.remove('ring-2', 'ring-indigo-500');
                            el.querySelector('.absolute.top-0.right-0')?.remove();
                        });
                        
                        // Remove highlight from all new images
                        document.querySelectorAll('#new-image-preview > div').forEach(el => {
                            el.classList.remove('ring-2', 'ring-indigo-500');
                            el.querySelector('.absolute.top-0.right-0')?.remove();
                        });
                        
                        // Highlight this one
                        this.classList.add('ring-2', 'ring-indigo-500');
                        
                        // Add the "Default" badge
                        if (!this.querySelector('.absolute.top-0.right-0')) {
                            const badge = document.createElement('div');
                            badge.className = 'absolute top-0 right-0 bg-indigo-500 text-white text-xs px-2 py-1';
                            badge.textContent = 'Default';
                            this.appendChild(badge);
                        }
                        
                        // Update the hidden input
                        defaultImageIndex.value = this.dataset.index;
                    });
                });
            }
            
            imageInput.addEventListener('change', function() {
                // Clear the new image preview
                newImagePreview.innerHTML = '';
                
                if (this.files && this.files.length > 0) {
                    newImagePreviewContainer.classList.remove('hidden');
                    
                    // Create previews for each image
                    Array.from(this.files).forEach((file, index) => {
                        const reader = new FileReader();
                        
                        reader.onload = function(e) {
                            const div = document.createElement('div');
                            div.className = 'relative group cursor-pointer border rounded-md overflow-hidden';
                            div.dataset.index = `new_${index}`;
                            
                            div.innerHTML = `
                                <img src="${e.target.result}" alt="Preview" class="h-24 w-full object-cover">
                                <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                                    <p class="text-white text-xs font-medium">Set as default</p>
                                </div>
                            `;
                            
                            div.addEventListener('click', function() {
                                // Remove highlight from all images
                                document.querySelectorAll('#existing-images > div').forEach(el => {
                                    el.classList.remove('ring-2', 'ring-indigo-500');
                                    el.querySelector('.absolute.top-0.right-0')?.remove();
                                });
                                
                                // Remove highlight from all new images
                                document.querySelectorAll('#new-image-preview > div').forEach(el => {
                                    el.classList.remove('ring-2', 'ring-indigo-500');
                                    el.querySelector('.absolute.top-0.right-0')?.remove();
                                });
                                
                                // Highlight this one
                                this.classList.add('ring-2', 'ring-indigo-500');
                                
                                // Add the "Default" badge
                                if (!this.querySelector('.absolute.top-0.right-0')) {
                                    const badge = document.createElement('div');
                                    badge.className = 'absolute top-0 right-0 bg-indigo-500 text-white text-xs px-2 py-1';
                                    badge.textContent = 'Default';
                                    this.appendChild(badge);
                                }
                                
                                // Update the hidden input
                                defaultImageIndex.value = this.dataset.index;
                            });
                            
                            newImagePreview.appendChild(div);
                        };
                        
                        reader.readAsDataURL(file);
                    });
                } else {
                    newImagePreviewContainer.classList.add('hidden');
                }
            });

            // Calculate total price based on unit price and quantity
            const unitQuantityInput = document.getElementById('unit_quantity');
            const unitPriceInput = document.getElementById('unit_price');
            
            function updateTotalPrice() {
                const quantity = parseFloat(unitQuantityInput.value) || 0;
                const price = parseFloat(unitPriceInput.value) || 0;
                const total = quantity * price;
                
                // You can update a total display element here if needed
            }
            
            // Nuova funzione per sincronizzare la quantitÃ  totale del batch con la somma delle quantitÃ  dei prodotti
            function syncBatchQuantityWithProducts() {
                const productRows = document.querySelectorAll('.product-row');
                let totalQuantity = 0;
                
                productRows.forEach(row => {
                    const quantityInput = row.querySelector('.quantity-input');
                    if (quantityInput) {
                        totalQuantity += parseFloat(quantityInput.value) || 0;
                    }
                });
                
                // Aggiorna il campo unit_quantity con il totale calcolato
                unitQuantityInput.value = totalQuantity;
                
                // Aggiorna anche il prezzo totale
                updateTotalPrice();
            }
            
            unitQuantityInput.addEventListener('input', updateTotalPrice);
            unitPriceInput.addEventListener('input', updateTotalPrice);
            
            // Aggiungi listener a tutte le quantitÃ  dei prodotti esistenti
            document.querySelectorAll('.quantity-input').forEach(input => {
                input.addEventListener('input', syncBatchQuantityWithProducts);
            });
            
            // Sincronizza la quantitÃ  all'avvio della pagina
            syncBatchQuantityWithProducts();

            // Listener per quando si aggiunge o rimuove un prodotto
            document.addEventListener('click', function(e) {
                // Se Ã¨ stato premuto il pulsante per rimuovere una riga prodotto
                if (e.target.closest('.remove-row')) {
                    // Attendere che il DOM sia aggiornato prima di ricalcolare
                    setTimeout(syncBatchQuantityWithProducts, 0);
                }
                
                // Se Ã¨ stato premuto il pulsante per aggiungere un prodotto
                if (e.target.closest('#add-product-row')) {
                    // Attendere che il nuovo prodotto sia aggiunto prima di aggiornare i listener
                    setTimeout(function() {
                        // Aggiungi listener all'ultimo input di quantitÃ  aggiunto
                        const newQuantityInputs = document.querySelectorAll('.quantity-input');
                        const lastInput = newQuantityInputs[newQuantityInputs.length - 1];
                        if (lastInput) {
                            lastInput.addEventListener('input', syncBatchQuantityWithProducts);
                        }
                        
                        // Sincronizza la quantitÃ 
                        syncBatchQuantityWithProducts();
                    }, 0);
                }
            });

            // Ensure we have default values for required fields before submitting
            const saveButton = document.getElementById('save-batch-btn');
            const batchForm = document.querySelector('form[action*="batches"]');
            
            if (saveButton && batchForm) {
                // Remove any existing click event listeners
                const newSaveButton = saveButton.cloneNode(true);
                saveButton.parentNode.replaceChild(newSaveButton, saveButton);
                
                // Add new event listener that properly submits the form
                newSaveButton.addEventListener('click', function(e) {
                    // Set default values for required fields if they're empty
                    if (!manufacturerInput.value) {
                        manufacturerInput.value = "Apple"; // Default value
                    }
                    
                    if (!modelInput.value) {
                        modelInput.value = "iPhone"; // Default value
                    }
                    
                    if (!gradeSelect.value) {
                        gradeSelect.value = "A"; // Default value
                    }
                    
                    // Ensure the sale_price is properly set
                    const salePriceInput = document.getElementById('sale_price');
                    if (salePriceInput && window.Alpine) {
                        // Make sure the Alpine.js value is properly synced
                        const alpineData = Alpine.raw(salePriceInput._x_dataStack[0]);
                        if (alpineData && typeof alpineData.salePrice !== 'undefined') {
                            salePriceInput.value = alpineData.salePrice;
                        }
                    }
                    
                    // If sale_price is still empty, use the backup value
                    if (!salePriceInput.value || salePriceInput.value === '0') {
                        const backupValue = document.querySelector('input[name="sale_price_backup"]')?.value;
                        if (backupValue) {
                            salePriceInput.value = backupValue;
                        }
                    }
                    
                    console.log("Submitting form with sale_price:", salePriceInput?.value);
                    
                    // Submit the form
                    batchForm.submit();
                });
            }
        });
    </script>
    
    <template id="param-tag-template">
        <div class="dynamic-param-tag bg-blue-100 text-blue-800 px-3 py-1.5 rounded-full flex items-center">
            <span class="text-sm mr-2"></span>
            <input type="hidden" name="param_keys[]">
            <input type="hidden" name="param_values[]" value="true">
            <button type="button" class="remove-param text-blue-600 hover:text-blue-900">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
    </template>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const categorySelect = document.getElementById('category_id');
            const dynamicParamsContainer = document.getElementById('dynamic-parameters');
            const paramTemplate = document.getElementById('param-tag-template');
            const addParamButton = document.getElementById('add-parameter');
            const newParamInput = document.getElementById('new-param-input');
            const suggestedParamsContainer = document.getElementById('suggested-params');
            const addSuggestedParamsButton = document.getElementById('add-suggested-params');
            
            // Fixed parameters handling
            const manufacturerInput = document.getElementById('product_manufacturer');
            const modelInput = document.getElementById('product_model');
            const gradeSelect = document.getElementById('condition_grade');
            
            // Image preview functionality
            const imageInput = document.getElementById('images');
            const imagePreviewContainer = document.getElementById('new-image-preview-container');
            const imagePreview = document.getElementById('new-image-preview');
            const defaultImageIndex = document.getElementById('default_image_index');
            
            // Rendi il campo unit_quantity readonly poichÃ© ora Ã¨ calcolato automaticamente
            const unitQuantityInput = document.getElementById('unit_quantity');
            unitQuantityInput.readOnly = true;
            unitQuantityInput.classList.add('bg-gray-100');
            
            // Aggiungi una nota che spiega che il campo Ã¨ calcolato automaticamente
            const quantityNote = document.createElement('p');
            quantityNote.className = 'text-xs text-gray-500 mt-1';
            quantityNote.textContent = 'Questo valore viene calcolato automaticamente in base alla somma delle quantitÃ  dei prodotti.';
            unitQuantityInput.parentNode.appendChild(quantityNote);

            // Initialize event listeners for existing remove buttons
            document.querySelectorAll('.dynamic-param-tag .remove-param').forEach(button => {
                button.addEventListener('click', function() {
                    this.closest('.dynamic-param-tag').remove();
                });
            });
            
            // Add parameter tag
            function addParamTag(key) {
                if (!key || key.trim() === '') return;
                
                // Check if the parameter already exists
                const existingParams = Array.from(dynamicParamsContainer.querySelectorAll('input[name="param_keys[]"]')).map(input => input.value);
                if (existingParams.includes(key)) return;
                
                const newTag = paramTemplate.content.cloneNode(true);
                const tagSpan = newTag.querySelector('span');
                const tagInput = newTag.querySelector('input[name="param_keys[]"]');
                
                tagSpan.textContent = key;
                tagInput.value = key;
                
                // Add event listener to remove button
                const removeButton = newTag.querySelector('.remove-param');
                removeButton.addEventListener('click', function() {
                    this.closest('.dynamic-param-tag').remove();
                });
                
                // Append to container
                dynamicParamsContainer.appendChild(newTag);
            }
            
            // Calculate total price based on unit price and quantity
            const unitPriceInput = document.getElementById('unit_price');
            
            function updateTotalPrice() {
                const quantity = parseFloat(unitQuantityInput.value) || 0;
                const price = parseFloat(unitPriceInput.value) || 0;
                const total = quantity * price;
                
                // You can update a total display element here if needed
            }
            
            unitQuantityInput.addEventListener('input', updateTotalPrice);
            unitPriceInput.addEventListener('input', updateTotalPrice);
            
            // Image preview functionality
            imageInput.addEventListener('change', function() {
                // Clear the preview
                imagePreview.innerHTML = '';
                
                if (this.files && this.files.length > 0) {
                    imagePreviewContainer.classList.remove('hidden');
                    
                    // Create previews for each image
                    Array.from(this.files).forEach((file, index) => {
                        const reader = new FileReader();
                        
                        reader.onload = function(e) {
                            const div = document.createElement('div');
                            div.className = 'relative group cursor-pointer border rounded-md overflow-hidden';
                            div.dataset.index = `new_${index}`;
                            
                            div.innerHTML = `
                                <img src="${e.target.result}" alt="Preview" class="h-24 w-full object-cover">
                                <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                                    <p class="text-white text-xs font-medium">Set as default</p>
                                </div>
                            `;
                            
                            div.addEventListener('click', function() {
                                // Remove highlight from all images
                                document.querySelectorAll('#existing-images > div').forEach(el => {
                                    el.classList.remove('ring-2', 'ring-indigo-500');
                                    el.querySelector('.absolute.top-0.right-0')?.remove();
                                });
                                
                                // Remove highlight from all new images
                                document.querySelectorAll('#new-image-preview > div').forEach(el => {
                                    el.classList.remove('ring-2', 'ring-indigo-500');
                                    el.querySelector('.absolute.top-0.right-0')?.remove();
                                });
                                
                                // Highlight this one
                                this.classList.add('ring-2', 'ring-indigo-500');
                                
                                // Add the "Default" badge
                                if (!this.querySelector('.absolute.top-0.right-0')) {
                                    const badge = document.createElement('div');
                                    badge.className = 'absolute top-0 right-0 bg-indigo-500 text-white text-xs px-2 py-1';
                                    badge.textContent = 'Default';
                                    this.appendChild(badge);
                                }
                                
                                // Update the hidden input
                                defaultImageIndex.value = this.dataset.index;
                            });
                            
                            imagePreview.appendChild(div);
                        };
                        
                        reader.readAsDataURL(file);
                    });
                } else {
                    imagePreviewContainer.classList.add('hidden');
                }
            });
            
            // Add parameter when Enter is pressed in the input
            newParamInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const paramKey = this.value.trim();
                    if (paramKey) {
                        addParamTag(paramKey);
                        this.value = '';
                    }
                }
            });
            
            // Add parameter when Add Parameter button is clicked
            addParamButton.addEventListener('click', function() {
                const paramKey = newParamInput.value.trim();
                if (paramKey) {
                    addParamTag(paramKey);
                    newParamInput.value = '';
                } else {
                    newParamInput.focus();
                }
            });
            
            // Remove parameter tag when button is clicked
            document.addEventListener('click', function(e) {
                if (e.target.closest('.remove-param')) {
                    e.target.closest('.dynamic-param-tag').remove();
                }
            });
            
            // Show suggested parameters based on category
            function updateSuggestedParams() {
                const categoryId = categorySelect.value;
                
                // Clear current suggestions
                suggestedParamsContainer.innerHTML = '';
                addSuggestedParamsButton.classList.add('hidden');
                
                if (!categoryId) {
                    suggestedParamsContainer.innerHTML = '<p>Select a category to see suggested parameters.</p>';
                    return;
                }

                // Find the selected category name
                const selectedCategory = categorySelect.options[categorySelect.selectedIndex].text;
                
                let suggestions = [];
                
                // Suggest parameters based on category
                if (selectedCategory.includes('LAPTOP') || selectedCategory.includes('MACBOOK') || selectedCategory.includes('PC')) {
                    suggestions = [
                        'CPU',
                        'RAM',
                        'Storage',
                        'GPU',
                        'OS',
                        'Screen Size',
                        'Screen Resolution'
                    ];
                } else if (selectedCategory.includes('SMARTPHONE') || selectedCategory.includes('TABLET')) {
                    suggestions = [
                        'Internal Memory',
                        'RAM',
                        'Camera',
                        'Battery Capacity',
                        'OS',
                        'Screen Size'
                    ];
                } else if (selectedCategory.includes('HDD') || selectedCategory.includes('SSD') || selectedCategory.includes('STORAGE')) {
                    suggestions = [
                        'Capacity',
                        'Type',
                        'Interface',
                        'Speed'
                    ];
                }
                
                if (suggestions.length > 0) {
                    const list = document.createElement('ul');
                    list.className = 'list-disc list-inside';
                    
                    suggestions.forEach(suggestion => {
                        const item = document.createElement('li');
                        item.textContent = suggestion;
                        list.appendChild(item);
                    });
                    
                    suggestedParamsContainer.appendChild(list);
                    addSuggestedParamsButton.classList.remove('hidden');
                    
                    // Add event listener to "Add all suggested parameters" button
                    addSuggestedParamsButton.onclick = function() {
                        suggestions.forEach(suggestion => {
                            addParamTag(suggestion);
                        });
                    };
                } else {
                    suggestedParamsContainer.innerHTML = '<p>No specific parameters suggested for this category.</p>';
                }
            }
            
            categorySelect.addEventListener('change', updateSuggestedParams);
            
            // Initialize on page load
            updateTotalPrice();
            updateSuggestedParams();
            
            // Initialize event listeners for existing remove buttons
            document.querySelectorAll('.dynamic-param-tag .remove-param').forEach(button => {
                button.addEventListener('click', function() {
                    this.closest('.dynamic-param-tag').remove();
                });
            });
            
            // Existing images functionality
            const existingImagesContainer = document.getElementById('existing-images');
            
            if (existingImagesContainer) {
                const existingImages = existingImagesContainer.querySelectorAll('.relative.group');
                
                existingImages.forEach(imgDiv => {
                    imgDiv.addEventListener('click', function(e) {
                        // Don't trigger if clicked on the remove checkbox
                        if (e.target.closest('label')) return;
                        
                        // Remove highlight from all existing images
                        existingImages.forEach(el => {
                            el.classList.remove('ring-2', 'ring-indigo-500');
                            el.querySelector('.absolute.top-0.right-0:not(.bg-red-500)')?.remove();
                        });
                        
                        // Remove highlight from all new images
                        document.querySelectorAll('#new-image-preview > div').forEach(el => {
                            el.classList.remove('ring-2', 'ring-indigo-500');
                            el.querySelector('.absolute.top-0.right-0')?.remove();
                        });
                        
                        // Highlight this one
                        this.classList.add('ring-2', 'ring-indigo-500');
                        
                        // Add the "Default" badge if not already present
                        if (!this.querySelector('.absolute.top-0.right-0:not(.bg-red-500)')) {
                            const badge = document.createElement('div');
                            badge.className = 'absolute top-0 right-0 bg-indigo-500 text-white text-xs px-2 py-1';
                            badge.textContent = 'Default';
                            this.appendChild(badge);
                        }
                        
                        // Update the hidden input
                        defaultImageIndex.value = this.dataset.index;
                    });
                });
            }
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const totalCostInput = document.getElementById("total_cost");
            const profitMarginInput = document.getElementById("profit_margin");
            const salePriceInput = document.getElementById("sale_price");
            
            // Function to calculate sale price
            function calculateSalePrice() {
                const totalCost = parseFloat(totalCostInput.value) || 0;
                const profitMargin = parseFloat(profitMarginInput.value) || 0;
                
                if (totalCost > 0 && profitMargin > 0) {
                    const salePrice = (totalCost * (1 + (profitMargin / 100))).toFixed(2);
                    salePriceInput.value = salePrice;
                }
            }
            
            // Add event listeners
            if (profitMarginInput) {
                profitMarginInput.addEventListener("input", calculateSalePrice);
            }
            
            if (totalCostInput) {
                totalCostInput.addEventListener("change", calculateSalePrice);
                // Triggerare l'evento change quando cambia batch_cost, shipping_cost e tax_amount
                document.getElementById("batch_cost").addEventListener("input", function() {
                    calculateTotalCost();
                    setTimeout(calculateSalePrice, 50);
                });
                document.getElementById("shipping_cost").addEventListener("input", function() {
                    calculateTotalCost();
                    setTimeout(calculateSalePrice, 50);
                });
                document.getElementById("tax_amount").addEventListener("input", function() {
                    calculateTotalCost();
                    setTimeout(calculateSalePrice, 50);
                });
            }
            
            // Initialize on page load
            calculateSalePrice();
        });
    </script>
</x-admin-layout> 